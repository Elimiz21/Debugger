import { useState, useEffect, useRef } from "react";
import { supabase } from "@/lib/supabaseClient";
import { useRouter } from "next/router";
import ChatMessage from "@/components/ChatMessage";

interface Message {
  id: number;
  role: string;
  content: string;
  createdAt: string;
}

interface ProjectData {
  id: number;
  repoUrl: string;
  bugDescription: string;
  sessions: { id: number; messages: Message[] }[];
}

export default function ProjectChat() {
  const router = useRouter();
  const { id } = router.query;
  const [project, setProject] = useState<ProjectData | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const endRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  useEffect(() => {
    supabase.auth.getSession().then(async ({ data: { session } }) => {
      if (!session) return router.replace("/");
      if (!id) return;
      try {
        const res = await fetch(`/api/projects/${id}`, {
          headers: { Authorization: `Bearer ${session.access_token}` }
        });
        if (!res.ok) throw new Error(res.statusText);
        const { project } = await res.json();
        setProject(project);
        if (project.sessions.length > 0) {
          setMessages(project.sessions[0].messages);
        }
      } catch {
        setError("Could not load project data.");
      } finally {
        setLoading(false);
      }
    });
  }, [id, router]);

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !project) return;
    const userMsg: Message = {
      id: Date.now(),
      role: "user",
      content: newMessage,
      createdAt: new Date().toISOString()
    };
    setMessages(msgs => [...msgs, userMsg]);
    setNewMessage("");

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) return router.replace("/");

    try {
      const res = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${session.access_token}`
        },
        body: JSON.stringify({
          sessionId: project.sessions[0].id,
          content: userMsg.content
        })
      });
      if (!res.ok) throw new Error("Failed to send message");
      const { assistantMessage } = await res.json();
      const aiMsg: Message = {
        id: Date.now() + 1,
        role: "assistant",
        content: assistantMessage,
        createdAt: new Date().toISOString()
      };
      setMessages(msgs => [...msgs, aiMsg]);
    } catch {
      setError("Failed to get response from AI.");
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        Loading chat...
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <div className="p-4 border-b flex justify-between items-center">
        <h1 className="text-xl font-semibold">
          Debugging: {project?.repoUrl}
        </h1>
        <button
          onClick={() => router.push("/projects")}
          className="text-sm text-gray-600 underline"
        >
          Back to Projects
        </button>
      </div>
      <div className="flex-1 p-4 bg-gray-50 overflow-y-auto">
        {messages.map(msg => (
          <ChatMessage key={msg.id} role={msg.role} content={msg.content} />
        ))}
        <div ref={endRef} />
      </div>
      {error && <div className="text-red-600 text-center py-2">{error}</div>}
      <form onSubmit={sendMessage} className="p-4 border-t flex">
        <input
          type="text"
          className="flex-1 border rounded px-3 py-2"
          placeholder="Type your message..."
          value={newMessage}
          onChange={e => setNewMessage(e.target.value)}
        />
        <button
          type="submit"
          className="ml-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Send
        </button>
      </form>
    </div>
  );
}
